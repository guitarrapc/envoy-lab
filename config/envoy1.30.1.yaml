admin:
  access_log:
    - name: envoy.access_loggers.stdout
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                  - name: envoy.file_access_log
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: upstream
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: service
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8081
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                  - name: envoy.file_access_log
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      log_format:
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: upstream
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/api.Echo/"
                          route:
                            cluster: echo-grpc
                          metadata:
                            filter_metadata:
                              envoy.filters.http.lua:
                                custom_value: "echo"
                        - match:
                            prefix: "/api.Reverse/"
                          route:
                            cluster: reverse-grpc
                          metadata:
                            filter_metadata:
                              envoy.filters.http.lua:
                                custom_value: "reverse"
                http_filters:
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: false
                      headers:
                        - name: ":path"
                          string_match:
                            exact: "/healthz"
                        - name: "x-envoy-livenessprobe"
                          string_match:
                            exact: "healthz"
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        # logDebug, logInfo, logWarn, logErr. Depends on envoy loglevel -l info.
                        inline_string: |
                          function envoy_on_request(request_handle)
                            body_length = request_handle:body():length()
                            request_handle:headers():add("request_body_size", tostring(body_length))
                          end

                          function envoy_on_response(response_handle)
                            local conf_value = response_handle:metadata():get("custom_value")
                            response_handle:headers():add("status", response_handle:headers():get(":status"))
                            response_handle:headers():add("custom-header", conf_value)
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: service
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      circuit_breakers:
        thresholds:
          max_connections: 16384
          max_pending_requests: 16384
          max_requests: 16384
      load_assignment:
        cluster_name: service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: service
                      port_value: 8080
    - name: echo-grpc
      connect_timeout: 0.5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      circuit_breakers:
        thresholds:
          max_connections: 16384
          max_pending_requests: 16384
          max_requests: 16384
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {} # enable grpc
      load_assignment:
        cluster_name: echo-grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: echo-grpc
                      port_value: 8080
      health_checks:
        timeout: 1s
        interval: 10s
        unhealthy_threshold: 2
        healthy_threshold: 2
        grpc_health_check: {}
    - name: reverse-grpc
      connect_timeout: 0.5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      circuit_breakers:
        # max_connection > max_requests, smaller thereshold will open circuit break and return 503. Otherwise, max_requests will be ignored.
        # max_connections change cx_open 0 -> 1 when circuit break open.
        # max_requests change rq_open 0 -> 1 when circuit break open.
        thresholds:
          max_connections: 16384 # default 1024
          max_requests: 16384 # default 1024
          max_pending_requests: 16384 # default 1024
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {} # enable grpc
      load_assignment:
        cluster_name: reverse-grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: reverse-grpc
                      port_value: 8080
      health_checks:
        timeout: 1s
        interval: 5s
        unhealthy_threshold: 2
        healthy_threshold: 2
        grpc_health_check: {}

layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              example_listener_name:
                connection_limit: 10000

overload_manager:
  resource_monitors:
    - name: "envoy.resource_monitors.global_downstream_max_connections"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig
        max_active_downstream_connections: 10000
